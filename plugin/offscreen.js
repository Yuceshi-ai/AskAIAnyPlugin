function log(...e){console.log(...e);try{chrome.runtime.sendMessage({type:"OFFSCREEN_LOG",payload:e})}catch(e){console.warn("Could not send log to background script:",e)}}async function initializeWorker(){log("[OCR Extension] Initializing Tesseract worker...");var e=chrome.runtime.getURL("lib/worker.min.js"),t=chrome.runtime.getURL("lib/"),r=chrome.runtime.getURL("langs/");try{var o=await Tesseract.createWorker("chi_sim",1,{workerPath:e,corePath:t,langPath:r,gzip:!1,workerBlobURL:!1,logger:e=>log("[OCR Progress]",e)});return log("[OCR Extension] Tesseract worker initialized successfully."),chrome.runtime.sendMessage({type:"WORKER_READY"}),o}catch(e){log("[OCR Extension] Tesseract worker initialization failed:",e);try{chrome.runtime.sendMessage({type:"WORKER_ERROR",error:e.message})}catch(e){log("[OCR Extension] Failed to send WORKER_ERROR:",e)}throw e}}let workerPromise=initializeWorker();async function handleOCRRequest(t,r,o){try{var n=await workerPromise;log("[OCR Extension] Starting OCR request...");let e=t;r&&10<r.width&&10<r.height&&(log("[OCR Extension] Cropping image with area:",JSON.stringify(r),"DPR: "+o),e=await cropImage(t,r,o));var i=(await n.recognize(e)).data;return log("[OCR Extension] OCR processing completed. Recognized data:",i),{text:i.text}}catch(e){throw log("[OCR Extension] OCR processing failed:",e),log("[OCR Extension] Reinitializing worker..."),workerPromise=initializeWorker(),e}}function cropImage(e,a,s=1){return new Promise((o,n)=>{let i=new Image;i.onload=()=>{try{var e={x:a.x*s,y:a.y*s,width:a.width*s,height:a.height*s},t=new OffscreenCanvas(e.width,e.height),r=t.getContext("2d");r?(log(`[OCR Extension] Drawing image onto canvas. Image size: ${i.width}x${i.height}. Scaled crop area: x:${e.x}, y:${e.y}, w:${e.width}, h:`+e.height),r.drawImage(i,e.x,e.y,e.width,e.height,0,0,e.width,e.height),t.convertToBlob({type:"image/png"}).then(o).catch(n)):n(new Error("Failed to get canvas context."))}catch(e){n(new Error("Canvas processing failed: "+e.message))}},i.onerror=()=>n(new Error("Image could not be loaded for cropping.")),i.src=e})}chrome.runtime.onMessage.addListener((t,e,r)=>(log("[OCR Extension] Received message:",t.type),"PERFORM_OCR"===t.type&&(async()=>{try{var e=await handleOCRRequest(t.imageData,t.area,t.devicePixelRatio);chrome.runtime.sendMessage({type:"OCR_RESULT",result:e,text:e.text,tabId:t.tabId}),log("[OCR Extension] OCR result sent to background for tab:",t.tabId)}catch(e){log("[OCR Extension] OCR processing error:",e),chrome.runtime.sendMessage({type:"OCR_ERROR",error:e.message,tabId:t.tabId})}})(),!1)),window.addEventListener("beforeunload",()=>{log("[OCR Extension] Offscreen document is being closed")}),log("[OCR Extension] Offscreen script loaded and ready for OCR tasks.");