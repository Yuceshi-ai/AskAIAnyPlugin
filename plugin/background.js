let OFFSCREEN_DOCUMENT_PATH="offscreen.html",creatingOffscreenDocument=null;async function ensureOffscreenDocument(){var e=await chrome.runtime.getContexts({contextTypes:["OFFSCREEN_DOCUMENT"],documentUrls:[chrome.runtime.getURL(OFFSCREEN_DOCUMENT_PATH)]});if(!(0<e.length))if(creatingOffscreenDocument)await creatingOffscreenDocument;else{creatingOffscreenDocument=chrome.offscreen.createDocument({url:OFFSCREEN_DOCUMENT_PATH,reasons:["USER_MEDIA"],justification:"OCR processing requires an offscreen document for canvas and worker."});try{await creatingOffscreenDocument}finally{creatingOffscreenDocument=null}}}chrome.runtime.onMessage.addListener((n,t,r)=>{if("OFFSCREEN_LOG"===n.type)console.log("[FROM OFFSCREEN]",...n.payload);else{if("CAPTURE_AREA"===n.type)return(async()=>{try{await ensureOffscreenDocument();var e=await chrome.tabs.captureVisibleTab(null,{format:"png"});chrome.runtime.sendMessage({type:"PERFORM_OCR",imageData:e,area:n.area,tabId:t.tab.id,devicePixelRatio:n.devicePixelRatio}),r({success:!0})}catch(e){console.error("Error during capture:",e),r({success:!1,error:e.message})}})(),!0;"OCR_RESULT"===n.type||"OCR_ERROR"===n.type?(async()=>{try{var{tabId:e,result:t,text:r,error:a}=n;e&&("OCR_RESULT"===n.type&&await chrome.storage.local.set({ocrText:r}),await chrome.tabs.sendMessage(e,{type:"OCR_RESULT"===n.type?"OCR_COMPLETED":"OCR_ERROR",result:t,error:a}))}catch(e){console.error(`Failed to send result to content script on tab ${n.tabId}:`,e)}})():"RESTART_SCREENSHOT"===n.type&&(async()=>{t.tab&&t.tab.id&&await chrome.tabs.sendMessage(t.tab.id,{type:"RESTART_SCREENSHOT"})})()}return!1});